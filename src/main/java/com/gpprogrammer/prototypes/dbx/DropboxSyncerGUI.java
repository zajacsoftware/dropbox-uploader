
package com.gpprogrammer.prototypes.dbx;

/**
 *
 * @author Tomasz Zajac
 */

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.GraphicsConfiguration;
import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
public class DropboxSyncerGUI extends javax.swing.JFrame {

  
    private String ls = System.getProperty("line.separator");  
    public DropboxSyncerGUI() 
    {   
        initComponents(); 
        setupComponents();
    }
    
    public DropboxSyncerGUI(GraphicsConfiguration gc) {
        super(gc);
       initComponents(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton3 = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Launcher");

        title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        title.setText("Dropbox Pusher Proto");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("status:");

        jButton1.setText("select directory");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("select file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("destination path");

        jTextPane1.setBackground(new java.awt.Color(0, 0, 0));
        jTextPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTextPane1);

        jButton3.setText("upload");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton3)))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       //  addLog("Getting files paths. Please wait it may take a moment");
        selectDir();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       selectFile();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        beginUpload();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    
    public void addLog(String msg)
    {
        try {
            jTextPane1.getDocument().insertString(jTextPane1.getDocument().getLength(), "\n"+msg, null); 
        } catch (BadLocationException ex) {
            Logger.getLogger(DropboxSyncerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void rewriteLog(String msg)
    {
        jTextPane1.setText(msg);
    }
    
    public void replaceLog(String msg, String newMsg)
    {
        String tx = jTextPane1.getText();
        tx.replace(tx, newMsg);
        jTextPane1.setText(tx);
    }
    
    public void updateLastLog(String newMsg)
    {
       String[] ar = jTextPane1.getText().split(ls);
       ar[ar.length-1] = newMsg;
       jTextPane1.setText( String.join(ls, ar));
    }
   
    public void updateLastLog(String newMsg, String lastFrase)
    {
        String str = jTextPane1.getText();
        int index = str.lastIndexOf(lastFrase);
        if(index >= 0)
        {
            str = str.substring(0, index);
            jTextPane1.setText( str.concat(newMsg) );
        }
    }
    
    private DropboxUploader target;
    public void addReloadListener(DropboxUploader target)
    {
        this.target = target;
    }
    
    public void selectDir()
    {
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(".")); // start at application current directory
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnVal = fc.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) 
        {
           File directory = fc.getSelectedFile();
           target.onSrcRootSelected(directory);
        }
    }
    
    public String getDestPath()
    {
        return jTextField1.getText();
    }
    
    public void selectFile()
    {
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(".")); // start at application current directory
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int returnVal = fc.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) 
        {
            File file = fc.getSelectedFile();
            target.onSrcRootSelected(file);
        }
    }  

    public void beginUpload()
    {
       target.beginUpload(); 
    }
    
    public void setSelectBtnEnabled(Boolean state)
    {
        this.jButton1.setEnabled(state);
        this.jButton2.setEnabled(state);
    }
    
    public void setUploadBtnEnabled(Boolean state)
    {
        jButton3.setEnabled(state);
    }
    
    private void setupComponents() 
    {   
      PlainDocument doc = (PlainDocument) jTextField1.getDocument();
      jTextField1.setText("/multithread_test_"+String.valueOf((int)Math.floor(Math.random()*1000))+String.valueOf((int)Math.floor(Math.random()*1000)));
      doc.setDocumentFilter(new MyIntFilter());
    }
    
   public void markProgress(String localPath, String destPath, String status)
   {
        try {
         
            String lp = localPath;//.replace("\\", "\\\\");
            String t = jTextPane1.getText().replace("\n", "");
            
            int a = t.indexOf(lp)+lp.length();
            SimpleAttributeSet set = new SimpleAttributeSet();
        
             StyleConstants.setBold(set, true);

                if(a>=0)
                {
                    jTextPane1.getDocument().insertString(a,  status, set);
                } 

        } catch (BadLocationException ex) {
            Logger.getLogger(DropboxSyncerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
   } 
    private int axcv = 1;
   public void markFilepath(String localPath, String destPath, String status)
   {
        try {
         
            String lp = localPath;
            String t = jTextPane1.getText().replace("\n", "");
            int a = t.indexOf(lp)+lp.length();
            SimpleAttributeSet set = new SimpleAttributeSet();
            StyleConstants.setFontSize(set, 12);
            switch(status)
            {
                case "File Exists":
                       StyleConstants.setForeground(set, Color.ORANGE);
                    break;
                case "Upload Complete":
                       StyleConstants.setForeground(set, Color.GREEN);
                     break;
                case "Upload Error":
                case "File Error":
                      StyleConstants.setForeground(set, Color.RED);
                     break;
                default:
                     StyleConstants.setForeground(set, Color.BLUE);

            }
            
            if(a>=0)
            {
                jTextPane1.getDocument().insertString(a, "  " + status + " --> "+destPath, set);
            } 
        } catch (BadLocationException ex) {
            Logger.getLogger(DropboxSyncerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
   } 
}

class MyIntFilter extends DocumentFilter
{
   private static final String INVALID_SEPARATOR = "/".equals(File.separator)?"\\":"/";
   // 
   private static final Pattern INVALID_PATH_CHARS = Pattern.compile("[\\\\!\"<>?@~#+=()*&^%$£`¬'|\\[\\]\\{\\}\\|]");
   @Override
   public void insertString(FilterBypass fb, int offset, String string,
         AttributeSet attr) throws BadLocationException
   {

      Document doc = fb.getDocument();
      StringBuilder sb = new StringBuilder();
      sb.append(doc.getText(0, doc.getLength()));
      sb.insert(offset, string);

      if (test(sb.toString())) {
         super.insertString(fb, offset, string, attr);
      } else {
         // warn the user and don't allow the insert
      }
   }

   private boolean test(String text)
   {
     Matcher m = INVALID_PATH_CHARS.matcher(text);
    
     return ! m.find();
   }

   @Override
   public void replace(FilterBypass fb, int offset, int length, String text, 
           AttributeSet attrs) throws BadLocationException
   {
      
      Document doc = fb.getDocument();
      StringBuilder sb = new StringBuilder();
      sb.append(doc.getText(0, doc.getLength()));
      sb.replace(offset, offset + length, text);

      if (test(sb.toString())) 
      {
         super.replace(fb, offset, length, text, attrs);
      } else {
        // TODO: add warning notification
      }
   }
   
   @Override
   public void remove(FilterBypass fb, int offset, int length)
         throws BadLocationException {
      Document doc = fb.getDocument();
      StringBuilder sb = new StringBuilder();
      sb.append(doc.getText(0, doc.getLength()));
      sb.delete(offset, offset + length);

      if (test(sb.toString())) {
         super.remove(fb, offset, length);
      } else {
         // TODO: add warning notification
      }
   }
}
